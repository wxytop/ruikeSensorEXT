<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="rGmWzZ;OQAJTLbk%Yp_0" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="m^1wAHQ9}8q0-POK$%Bu"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace rkSensorExt {" line1="    export enum playType {" line2="        //% block=&quot;播放&quot;" line3="        Play = 0x01," line4="        //% block=&quot;暂停&quot;" line5="        Pause = 0x02," line6="        //% block=&quot;下一曲&quot;" line7="        Last = 0x03," line8="        //% block=&quot;上一曲&quot;" line9="        Next = 0x04," line10="        //% block=&quot;音量+&quot;" line11="        VolumeUp = 0x05," line12="        //% block=&quot;音量-&quot;" line13="        VolumeDn = 0x06," line14="        //% block=&quot;停止播放&quot;" line15="        Stop = 0x0E" line16="    }" line17="    /**" line18="    * 枚举：播放模式" line19="    */" line20="    export enum playLoop {" line21="        //% block=&quot;全部循环&quot;" line22="        LOOP_ALL = 0x00," line23="        //% block=&quot;文件夹循环&quot;" line24="        LOOP_FOLDER = 0x01," line25="        //% block=&quot;单曲循环&quot;" line26="        LOOP_ONE = 0x02," line27="        //% block=&quot;随机播放&quot;" line28="        LOOP_RAM = 0x03" line29="    }" line30="    export enum equalizer {" line31="        //% block=&quot;普通&quot;" line32="        Normal = 0x00," line33="        //% block=&quot;流行&quot;" line34="        Pop = 0x01," line35="        //% block=&quot;摇滚+&quot;" line36="        Rock = 0x02," line37="        //% block=&quot;爵士&quot;" line38="        Jazz = 0x03," line39="        //% block=&quot;古典&quot;" line40="        Classic = 0x04," line41="        //% block=&quot;低音&quot;" line42="        Bass = 0x05" line43="    }" line44="    //% blockId=rkSensorExt_MP3Init block=&quot;MP3模块初始化RX|%pin1|TX %pin2&quot;" line45="    //% weight=90" line46="    //% blockGap=20" line47="    export function MP3_init(pin1: SerialPin, pin2: SerialPin): void {" line48="        let item = &quot;&quot;" line49="        serial.redirect(" line50="            pin1," line51="            pin2," line52="            BaudRate.BaudRate9600" line53="        )" line54="        item = serial.readString()" line55="        basic.pause(100)" line56="    }" line57="    //% blockId=rkSensorExt_MP3Play block=&quot;设置MP3模块播放模式为|%type&quot;" line58="    //% weight=80" line59="    //% blockGap=20" line60="    export function MP3_play(type: playType): void {" line61="        let buffer = pins.createBuffer(4);" line62="        buffer.setNumber(NumberFormat.UInt8BE, 0, 0x7E)" line63="        buffer.setNumber(NumberFormat.UInt8BE, 1, 0x02)" line64="        buffer.setNumber(NumberFormat.UInt8BE, 2, type)" line65="        //buffer.setNumber(NumberFormat.UInt8BE, 3, 0x00)" line66="        buffer.setNumber(NumberFormat.UInt8BE, 3, 0xEF)" line67="        serial.writeBuffer(buffer)" line68="        basic.pause(100)" line69="    }" line70="    //% weight=70" line71="    //% vol.min=0 vol.max=30" line72="    //% blockGap=20" line73="    //% blockId=&quot;MP3_volume_set&quot;" line74="    //% block=&quot;设置MP3音量|%vol&quot;" line75="    export function MP3_volume_set(vol: number): void {" line76="        let buffer2 = pins.createBuffer(5);" line77="        buffer2.setNumber(NumberFormat.UInt8BE, 0, 0x7E)" line78="        buffer2.setNumber(NumberFormat.UInt8BE, 1, 0x03)" line79="        buffer2.setNumber(NumberFormat.UInt8BE, 2, 0x31)" line80="        buffer2.setNumber(NumberFormat.UInt8BE, 3, &lt;number&gt;vol)" line81="        buffer2.setNumber(NumberFormat.UInt8BE, 4, 0xEF)" line82="        serial.writeBuffer(buffer2)" line83="    }" line84="    //% weight=60" line85="    //% num.min=1 num.max=65535" line86="    //% blockGap=20" line87="    //% blockId=&quot;MP3_assign_song&quot;" line88="    //% block=&quot;MP3播放第 |%num首歌&quot;" line89="    export function MP3_assign_song(num: number): void {" line90="        num = num &lt; 1 ? 1 : (num &gt; 65535 ? 65535 : num)" line91="        let buffer3 = pins.createBuffer(6);" line92="        let num_h = (num &gt;&gt; 8) &amp; 0xFF" line93="        let num_l = num &amp; 0xFF" line94="        buffer3.setNumber(NumberFormat.UInt8BE, 0, 0x7E)" line95="        buffer3.setNumber(NumberFormat.UInt8BE, 1, 0x04)" line96="        buffer3.setNumber(NumberFormat.UInt8BE, 2, 0x41)" line97="        buffer3.setNumber(NumberFormat.UInt8BE, 3, num_h)" line98="        buffer3.setNumber(NumberFormat.UInt8BE, 4, num_l)" line99="        buffer3.setNumber(NumberFormat.UInt8BE, 5, 0xEF)" line100="        serial.writeBuffer(buffer3)" line101="    }" line102="    //% blockId=rkSensorExt_MP3LoopMode block=&quot;设置MP3 循环模式为|%loopMode&quot;" line103="    //% weight=50" line104="    //% blockGap=10" line105="    export function MP3_loopMode(loopMode: playLoop): void {" line106="        let buffer4 = pins.createBuffer(5);" line107="        buffer4.setNumber(NumberFormat.UInt8BE, 0, 0x7E)" line108="        buffer4.setNumber(NumberFormat.UInt8BE, 1, 0x03)" line109="        buffer4.setNumber(NumberFormat.UInt8BE, 2, 0x33)" line110="        buffer4.setNumber(NumberFormat.UInt8BE, 3, loopMode)" line111="        buffer4.setNumber(NumberFormat.UInt8BE, 4, 0xEF)" line112="        serial.writeBuffer(buffer4)" line113="    }" line114="    //% weight=40" line115="    //% blockGap=10" line116="    //% blockId=&quot;MP3_eq_set&quot;" line117="    //% block=&quot;设置MP3播放音效%eq&quot;" line118="    export function MP3_eq_set(eq: equalizer): void {" line119="        let buffer5 = pins.createBuffer(5);" line120="        buffer5.setNumber(NumberFormat.UInt8BE, 0, 0x7E)" line121="        buffer5.setNumber(NumberFormat.UInt8BE, 1, 0x03)" line122="        buffer5.setNumber(NumberFormat.UInt8BE, 2, 0x32)" line123="        buffer5.setNumber(NumberFormat.UInt8BE, 3, eq)" line124="        buffer5.setNumber(NumberFormat.UInt8BE, 4, 0xEF)" line125="        serial.writeBuffer(buffer5)" line126="    }" line127="" line128="    let _SDO = 0" line129="    let _SCL = 0" line130="    /**" line131="     * " line132="     * @param SDO SDO  eg: DigitalPin.P13 " line133="     * @param SCL SCL  eg: DigitalPin.P14" line134="     */" line135="    //% blockId=actuator_keyborad_pin block=&quot;actuator_keyborad_pin|SDOPIN %SDO|SCLPIN %SCL&quot;   group=&quot;矩阵键盘模块&quot;" line136="    //% weight=71" line137="    //% subcategory=&quot;基础模块&quot;" line138="    export function actuator_keyborad_pin(SDO: DigitalPin, SCL: DigitalPin): void {" line139="" line140="        _SDO = SDO" line141="        _SCL = SCL" line142="    }" line143="" line144="    //% blockId=actuator_keyborad_read block=&quot;actuator_keyborad_read&quot;   group=&quot;矩阵键盘模块&quot;" line145="    //% weight=70" line146="    //% subcategory=&quot;基础模块&quot;" line147="    export function actuator_keyborad_read(): string {" line148="        let DATA = 0" line149="        pins.digitalWritePin(_SDO, 1)" line150="        control.waitMicros(93)" line151="" line152="        pins.digitalWritePin(_SDO, 0)" line153="        control.waitMicros(10)" line154="" line155="        for (let i = 0; i &lt; 16; i++) {" line156="            pins.digitalWritePin(_SCL, 1)" line157="            pins.digitalWritePin(_SCL, 0)" line158="            DATA |= pins.digitalReadPin(_SDO) &lt;&lt; i" line159="        }" line160="        control.waitMicros(2 * 1000)" line161="        // &#9;serial.writeString('' + DATA + '\n');" line162="        switch (DATA &amp; 0xFFFF) {" line163="            case 0xFFFE: return &quot;1&quot;" line164="            case 0xFFFD: return &quot;2&quot;" line165="            case 0xFFFB: return &quot;3&quot;" line166="            case 0xFFEF: return &quot;4&quot;" line167="            case 0xFFDF: return &quot;5&quot;" line168="            case 0xFFBF: return &quot;6&quot;" line169="            case 0xFEFF: return &quot;7&quot;" line170="            case 0xFDFF: return &quot;8&quot;" line171="            case 0xFBFF: return &quot;9&quot;" line172="            case 0xDFFF: return &quot;0&quot;" line173="            case 0xFFF7: return &quot;A&quot;" line174="            case 0xFF7F: return &quot;B&quot;" line175="            case 0xF7FF: return &quot;C&quot;" line176="            case 0x7FFF: return &quot;D&quot;" line177="            case 0xEFFF: return &quot;*&quot;" line178="            case 0xBFFF: return &quot;#&quot;" line179="            default: return &quot; &quot;" line180="        }" line181="    }" line182="" line183="}" numlines="184"></mutation></block></statement></block></xml>